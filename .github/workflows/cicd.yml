name: Build and Check

# TODO: Remove negative feature

on:
  push:
    branches: ["main", "cicd", "release", "develop"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      resetBenchmarks:
        description: "Reset the benchmark data"
        required: true
        type: boolean

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: "1"
  BENCHMARK_REGRESSION_PERCENT_FAIL: 10

jobs:
  deny:
    name: Check dependencies/ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          rust-version: "1.61.0"

  format:
    name: Check format with nightly rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - run: cargo fmt --check

  base:
    needs: [format]
    name: Build, check and test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        toolchain:
          - "1.61.0" # MSRV
          - stable
          - nightly
        include:
          - components: clippy
            toolchain: stable
          - features: standard,custom,negative,with-iai,with-flamegraph
          - features: standard,custom,negative
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: ${{ matrix.components }}
      - name: Prepare
        if: matrix.toolchain != 'stable'
        run: |
          rustup toolchain install stable --no-self-update --component clippy
      - uses: Swatinem/rust-cache@v2
        with:
          key: "${{ matrix.os }}_${{ matrix.toolchain }}"
      - name: Info if unix
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          set -x
          uname -a
          pwd
          rustup --version
          rustup show
          rustup component list --installed
      - name: Info if windows
        if: ${{ matrix.os == 'windows-latest' }}
        shell: bash
        run: |
          set -x
          rustup show
          rustup component list --installed
      - name: Build
        run: cargo build --features ${{ matrix.features }}
      - name: Lint
        run: cargo +stable clippy --features ${{ matrix.features }} --all-targets -- -D warnings
      - name: Test
        run: cargo test --features ${{ matrix.features }}

  cross:
    needs: [format]
    name: Cross build and test
    strategy:
      fail-fast: false
      matrix:
        target:
          ##### big endian targets #####
          - s390x-unknown-linux-gnu
          # - sparc64-unknown-linux-gnu
          # - powerpc-unknown-linux-gnu
          - mips-unknown-linux-gnu
          ##### little endian targets #####
          - i686-unknown-linux-gnu
          - i586-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - arm-unknown-linux-gnueabihf
          # - riscv64gc-unknown-linux-gnu
          # dependency errors: quick-xml
          # - wasm32-unknown-emscripten
          # dependency errors: criterion
          # - x86_64-linux-android
          - x86_64-unknown-linux-musl
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "1.61.0"
      - uses: Swatinem/rust-cache@v2
        with:
          key: "ubuntu-latest_1.61.0_${{ matrix.target }}"
      - uses: taiki-e/install-action@cross
      - name: Configure cross
        run: |
          cat <<EOF | tee Cross.toml
          [build.env]
          passthrough = ["CI", "RUST_BACKTRACE", "CARGO_TERM_COLOR", "CARGO_REGISTRIES_CRATES_IO_PROTOCOL", "CARGO_INCREMENTAL"]
          EOF
      - name: Info
        run: |
          set -x
          pwd
          rustup --version
          rustup show
          rustup component list --installed
          cargo --list
          cross --version
      - name: Build
        run: cross build --all-features --target ${{ matrix.target }}
      - name: Test
        run: cross test --all-features --target ${{ matrix.target }}

  docs:
    needs: [base, cross]
    name: Docs/ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Run doc tests
        run: cargo test --all-features --doc -- --show-output
      - name: Check Documentation
        run: cargo doc --all-features --no-deps --document-private-items

  coverage:
    needs: [base, cross]
    name: Coverage/ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: llvm-tools-preview
      - uses: Swatinem/rust-cache@v2
      - name: Install llvm
        run: sudo apt-get -y update && sudo apt-get -y install llvm
      - uses: taiki-e/install-action@grcov
      - name: Info
        run: |
          set -x
          uname -a
          printenv | grep -i -e cargo -e rust -e llvm
          cargo -V
          rustup -V
          rustup show
          rustup component list --installed
      - name: Create coverage profile
        run: |
          cat <<EOF | tee ~/.cargo/config
          [profile.coverage]
          inherits = "dev"
          lto = false
          debug = true
          opt-level = 0
          EOF
      - name: Clean
        run: cargo clean
      - name: Build
        run: cargo build --all-features --profile coverage
      - name: Test
        run: cargo test --all-features --tests --profile coverage
      - name: Generate code coverage
        run: |
          ~/.cargo/bin/grcov . \
            --llvm-path /usr/bin \
            --binary-path target/coverage \
            --ignore-not-existing \
            --output-type files \
            --excl-start "cov:\s*excl-start" \
            --excl-stop "cov:\s*excl-stop" \
            --excl-line '^\s*((debug_)?assert(_eq|_ne)?!|#\[derive\(|.*cov:\s*excl-line)' \
            --ignore "examples/*" \
            --ignore build.rs \
            --ignore "vendor/*" \
            --ignore "/*" \
            --ignore "[a-zA-Z]:/*" \
            --source-dir . | sort -u

          ~/.cargo/bin/grcov . \
            --branch \
            --llvm-path /usr/bin \
            --binary-path target/coverage \
            --ignore-not-existing \
            --output-type lcov \
            --source-dir . \
            --excl-start "cov:\s*excl-start" \
            --excl-stop "cov:\s*excl-stop" \
            --excl-line '^\s*((debug_)?assert(_eq|_ne)?!|#\[derive\(|.*cov:\s*excl-line)' \
            --ignore "examples/*" \
            --ignore build.rs \
            --ignore "vendor/*" \
            --ignore "/*" \
            --ignore "[a-zA-Z]:/*" \
            --output-path lcov.info && test -e lcov.info
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: false
    env:
      RUSTFLAGS: "-C instrument-coverage"
      LLVM_PROFILE_FILE: "fundu_coverage-%p-%m.profraw"
      RUST_BACKTRACE: "0"

  fuzzing:
    needs: [base, cross]
    name: Fuzzy testing/ubuntu-latest
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./fuzz"
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: llvm-tools
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            fuzz -> target
          cache-on-failure: true
      - name: Prepare
        run: sudo apt-get -y update && sudo apt-get -y install llvm
      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz
      - name: Run fuzzing for 5 minutes
        run: |
          cargo fuzz run --all-features f64_like_input -- \
            -max_total_time=300 \
            -print_final_stats=1 \
            -print_corpus_stats=1 \
            -verbosity=2
    env:
      RUSTFLAGS: "-C instrument-coverage"
      LLVM_PROFILE_FILE: "fundu_fuzzy_coverage-%p-%m.profraw"

  benchmarks:
    needs: [base, cross]
    name: Benchmarks/ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "1.61.0"
      - uses: Swatinem/rust-cache@v2
      - name: Install iai-callgrind-runner
        run: |
          version=$(cargo metadata --format-version=1 |\
            jq '.packages[] | select(.name == "iai-callgrind").version' |\
            tr -d '"'
          )
          cargo install iai-callgrind-runner --version $version
      - name: Prepare
        run: |
          sudo apt-get -y update && sudo apt-get -y install valgrind
      - name: Download reference benchmarks
        if: ${{ !inputs.resetBenchmarks }}
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow_conclusion: success
          name: iai-callgrind-benchmarks
          check_artifacts: true
          path: target/iai
          if_no_artifact_found: warn
      - name: Run iai-callgrind standard feature benchmarks
        run: |
          cargo bench --features standard,with-iai \
            --bench iai_bench_standard \
            --bench iai_bench_parsing \
            --bench iai_bench_parsing_time_units \
            --bench iai_bench_reference | tee bench.out
      - name: Run iai-callgrind custom feature benchmarks
        run: |
          cargo bench --features custom,with-iai --no-default-features \
            --bench iai_bench_custom | tee -a bench.out
      - name: Run iai-callgrind negative feature benchmarks
        run: |
          cargo bench --features negative,with-iai \
            --bench iai_bench_parsing_negative | tee -a bench.out
      - name: Strip colors from output file bench.out
        run: |
          # remove colors (from https://unix.stackexchange.com/a/111936 by user55518)
          sed -Ei 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g' bench.out
      - name: Check for regression
        run: |
          echo 0 > fail
          echo 0 > skip
          while IFS= read -r line; do
            skip=$(( $(< skip) > 0 ))
            if grep -Eq '^\S*reference$' --color=never <<<"$line"; then
              echo 6 > skip
            else
              echo $(( $(< skip) - 1 )) > skip
            fi
            if [[ $skip -eq 0 ]] && grep 'Estimated Cycles:' --color=never <<<"$line"; then
              p=$(sed -En 's/\s*Estimated Cycles:.*\([+]([0-9]*)([.][0-9]*)?%\)/\1/p' <<<"$line")
              if [[ $p -ge ${BENCHMARK_REGRESSION_PERCENT_FAIL} ]]; then
                echo "::error::Regressed +${p}% >= BENCHMARK_REGRESSION_PERCENT_FAIL (=${BENCHMARK_REGRESSION_PERCENT_FAIL}%)"
                echo 2 > fail
              fi
            else
              echo "$line"
            fi
          done < bench.out
          exit $(< fail)
      - uses: actions/upload-artifact@v3
        with:
          name: iai-callgrind-benchmarks
          path: target/iai

  miri:
    needs: [base, cross]
    name: Tests/Miri
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-gnu # 32-bit
          - mips64-unknown-linux-gnuabi64 # big-endian
          - aarch64-unknown-linux-gnu
          - arm-unknown-linux-gnueabihf
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: miri
      - uses: Swatinem/rust-cache@v2
        with:
          key: "miri_${{ matrix.target }}"
          cache-directories: /home/runner/.cache/miri
      - uses: taiki-e/install-action@cross
        if: matrix.target != 'x86_64-unknown-linux-gnu'
      - name: Info
        run: |
          set -x
          pwd
          rustup --version
          rustup show
          rustup component list --installed
          cargo --list
      - name: Setup cross/miri
        run: |
          cargo miri setup

          case ${{ matrix.target }} in
            x86_64-unknown-linux-gnu )
              ;;
            * )
              cat <<EOF | tee Cross.toml
          [build.env]
          passthrough = ["CI", "RUST_BACKTRACE", "CARGO_TERM_COLOR", "CARGO_REGISTRIES_CRATES_IO_PROTOCOL", "CARGO_INCREMENTAL"]
          EOF
              ;;
          esac
      - name: Test with miri
        run: |
          case ${{ matrix.target }} in
            x86_64-unknown-linux-gnu )
              cargo miri test --features standard,custom,negative
              ;;
            * )
              cross miri test --features standard,custom,negative --target ${{ matrix.target }}
              ;;
          esac
